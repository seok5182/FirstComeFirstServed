version: "3.8"

services:
  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka
    ports:
      - "8083:8083"
    networks:
      - my-network

  gateway-service:
    container_name: gateway-service
    build:
      context: ./gateway
    ports:
      - "8084:8084"
    networks:
      - my-network
    depends_on:
      - eureka-server

  order-service:
    container_name: order-service
    build:
      context: ./order
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://order-db:3306/fcfs-order
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Skdud12!@
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    networks:
      - my-network
    depends_on:
      order-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_started

  payment-service:
    container_name: payment-service
    build:
      context: ./payment
    ports:
      - "8085:8085"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    networks:
      - my-network
    depends_on:
      - eureka-server

  product-service:
    container_name: product-service
    build:
      context: ./product
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://product-db:3306/fcfs-product
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Skdud12!@
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - my-network
    depends_on:
      product-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_started

  user-service:
    container_name: user-service
    build:
      context: ./user
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://user-db:3306/fcfs-user
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Skdud12!@
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - my-network
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_started

  user-db:
    container_name: user-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: Skdud12!@
      MYSQL_DATABASE: fcfs-user
      TZ: Asia/Seoul
    ports:
      - "3307:3306"
    volumes:
      - user-db-data:/var/lib/mysql
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pSkdud12!@" ]
      interval: 10s
      timeout: 5s
      retries: 5

  product-db:
    container_name: product-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: Skdud12!@
      MYSQL_DATABASE: fcfs-product
      TZ: Asia/Seoul
    ports:
      - "3308:3306"
    volumes:
      - product-db-data:/var/lib/mysql
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pSkdud12!@" ]
      interval: 10s
      timeout: 5s
      retries: 5

  order-db:
    container_name: order-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: Skdud12!@
      MYSQL_DATABASE: fcfs-order
      TZ: Asia/Seoul
    ports:
      - "3309:3306"
    volumes:
      - order-db-data:/var/lib/mysql
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pSkdud12!@" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.9.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 5s

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_NAMES: INSIDE,OUTSIDE
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ENABLE_KRAFT: no
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ## 모든 서비스 Docker로 띄울 땐 INSIDE / Kafka,zookeeper,redis만 Docker 띄울 땐 OUTSIDE
      ##KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
    networks:
      - my-network
    depends_on:
      zookeeper:
        condition: service_healthy

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - /path/to/your/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  user-db-data:
  product-db-data:
  order-db-data:

networks:
  my-network:
    driver: bridge